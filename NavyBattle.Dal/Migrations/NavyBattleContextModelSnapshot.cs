// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NavyBattle.Dal.Contexts;

namespace NavyBattle.Dal.Migrations
{
    [DbContext(typeof(NavyBattleContext))]
    partial class NavyBattleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NavyBattleModels.BaseBattleField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Height");

                    b.Property<int?>("OwnerId");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("BattleFields");
                });

            modelBuilder.Entity("NavyBattleModels.BattleShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BattleFieldId");

                    b.Property<bool>("IsVertical");

                    b.Property<int>("Length");

                    b.Property<int>("StartX");

                    b.Property<int>("StartY");

                    b.HasKey("Id");

                    b.HasIndex("BattleFieldId");

                    b.ToTable("BattleShips");
                });

            modelBuilder.Entity("NavyBattleModels.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("State");

                    b.Property<int?>("TurnOfThePlayer");

                    b.Property<int?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("NavyBattleModels.Models.GameBattleField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BattleFieldId");

                    b.Property<int?>("GameId");

                    b.Property<bool>("IsWaiting");

                    b.Property<int?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("BattleFieldId");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GameBattleFields");
                });

            modelBuilder.Entity("NavyBattleModels.Models.GameBattleShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BattleShipId");

                    b.Property<int>("DamagedPointsCnt");

                    b.Property<int?>("GameBattlefieldId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("BattleShipId");

                    b.HasIndex("GameBattlefieldId");

                    b.ToTable("GameBattleShips");
                });

            modelBuilder.Entity("NavyBattleModels.Models.Shot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameBattleFieldId");

                    b.Property<int?>("GameId");

                    b.Property<int?>("PlayerId");

                    b.Property<int>("ShotX");

                    b.Property<int>("ShotY");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("GameBattleFieldId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("NavyBattleModels.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NavyBattleModels.BaseBattleField", b =>
                {
                    b.HasOne("NavyBattleModels.Models.User", "Owner")
                        .WithMany("BattleFields")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("NavyBattleModels.BattleShip", b =>
                {
                    b.HasOne("NavyBattleModels.BaseBattleField", "BattleField")
                        .WithMany("BattleShips")
                        .HasForeignKey("BattleFieldId");
                });

            modelBuilder.Entity("NavyBattleModels.Models.Game", b =>
                {
                    b.HasOne("NavyBattleModels.Models.User", "Winner")
                        .WithMany("Games")
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("NavyBattleModels.Models.GameBattleField", b =>
                {
                    b.HasOne("NavyBattleModels.BaseBattleField", "BattleField")
                        .WithMany()
                        .HasForeignKey("BattleFieldId");

                    b.HasOne("NavyBattleModels.Models.Game", "Game")
                        .WithMany("GameBattleFields")
                        .HasForeignKey("GameId");

                    b.HasOne("NavyBattleModels.Models.User", "Owner")
                        .WithMany("GameBattleFields")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("NavyBattleModels.Models.GameBattleShip", b =>
                {
                    b.HasOne("NavyBattleModels.BattleShip", "BattleShip")
                        .WithMany()
                        .HasForeignKey("BattleShipId");

                    b.HasOne("NavyBattleModels.Models.GameBattleField", "GameBattleField")
                        .WithMany("GameBattleShips")
                        .HasForeignKey("GameBattlefieldId");
                });

            modelBuilder.Entity("NavyBattleModels.Models.Shot", b =>
                {
                    b.HasOne("NavyBattleModels.Models.GameBattleField", "GameBattleField")
                        .WithMany("Shots")
                        .HasForeignKey("GameBattleFieldId");
                });
#pragma warning restore 612, 618
        }
    }
}
